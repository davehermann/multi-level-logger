/// <reference types="node" />
import { colors } from "./levels";
/** Interface for object used as log initializer */
interface ILogDefinition {
    /** Named log level, threshold numerical log value, or log level enumeration */
    logLevel?: string | number;
    [x: string]: any;
}
/** Log level display */
interface ILevelConfiguration {
    /** Default log level for all logging */
    default: number;
    /** Additional named log(s) and their level */
    [x: string]: number;
}
/** Configuration for the module */
interface IBaseConfiguration {
    /** Minimum log level to display */
    logLevel: ILevelConfiguration;
    /** Show a timestamp when printing to the log */
    includeTimestamp: boolean;
    /** Show the code location when printing to the log */
    includeCodeLocation: boolean;
    /** Amount of whitespace to include for the JSON.stringify() function */
    jsonFormatter: number;
    /** Display colors in a terminal capable of showing them */
    useColors: boolean;
}
/** Log writting configuration for the single message */
interface ILogOptionConfiguration {
    /** Show a timestamp when printing to the log */
    includeTimestamp?: boolean;
    /** Show the code location when printing to the log */
    includeCodeLocation?: boolean;
    /** Amount of whitespace to include for the JSON.stringify() function */
    jsonFormatter?: number;
    /** Display colors in a terminal capable of showing them */
    useColors?: boolean;
}
/** Configuration and options passed to the log writting function */
interface ILog {
    /** The base configuration for the module instance */
    configuration: IBaseConfiguration;
    /** The level at which this message will appear in the log */
    messageLevel: number;
    /** Options for display of this message */
    options?: ILogOptions;
}
interface ILogOptions {
    /** Override formatting configuration */
    configuration?: ILogOptionConfiguration;
    /**
     * Override the conversion of a Javascript *Object* via *JSON*
     *   - *When passing in an **object** as **data**
     */
    asIs?: boolean;
    /** When multiple named logs are configured, write to this named log */
    logName?: string;
}
/** Object properties generated by Error.captureStackTrace() */
interface IStackTraceObject {
    /** All CallSite objects for the current system call */
    stack?: Array<NodeJS.CallSite>;
}
/** Color parameters */
interface ILogColor {
    /** Text to color */
    logString: string;
    /** Color value */
    color: colors;
    /** Logging options */
    options: ILogOptionConfiguration;
}
/** Pre-entry display data (e.g. timestamp) */
interface IAdditionalData {
    /** Data to display, or sub-list of data to display */
    text: string | Array<IAdditionalData>;
    /** Color for display of data */
    color?: colors;
}
/** Displaying timestamp and code location data, with color highlights */
interface IAdditionalDataDisplay {
    /** Pre-entry display data */
    additionalData: Array<IAdditionalData>;
    /** Log writting configuration for the single message */
    options: ILogOptionConfiguration;
    /** Is this an error-level log */
    isError: boolean;
    /** Is this a sublist of data */
    isSublist?: boolean;
}
export { IAdditionalData, IAdditionalDataDisplay, IBaseConfiguration, ILog, ILogColor, ILogDefinition, ILogOptions, ILogOptionConfiguration, IStackTraceObject, };
