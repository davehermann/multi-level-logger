interface IStandardLevels {
    /** 0 */
    dev: number;
    /** 10 */
    trace: number;
    /** 20 */
    debug: number;
    /** 30 */
    info: number;
    /** 40 */
    warn: number;
    /** 50 */
    error: number;
    /** 60 */
    fatal: number;
}

interface ILogDefinition {
    logLevel?: string;
    [x:string]: any;
}

/** Log level display */
interface ILevelConfiguration {
    /** Default log level for all logging */
    default: number;
    /** Additional named log(s) and their level */
    [x:string]: number;
}

/** Configuration for the module */
interface IBaseConfiguration {
    /** Minimum log level to display */
    logLevel: ILevelConfiguration;
    /** Show a timestamp when printing to the log */
    includeTimestamp: boolean;
    /** Show the code location when printing to the log */
    includeCodeLocation: boolean;
    /** Amount of whitespace to include for the JSON.stringify() function */
    jsonFormatter: number;
}

/** Log writting configuration for the single message */
interface ILogOptionConfiguration {
    /** Show a timestamp when printing to the log */
    includeTimestamp?: boolean;
    /** Show the code location when printing to the log */
    includeCodeLocation?: boolean;
    /** Amount of whitespace to include for the JSON.stringify() function */
    jsonFormatter?: number;
}

/** Configuration and options passed to the log writting function */
interface ILog {
    /** The base configuration for the module instance */
    configuration: IBaseConfiguration;
    /** The level at which this message will appear in the log */
    messageLevel: number;
    /** Options for display of this message */
    options?: ILogOptions;
}

interface ILogOptions {
    /** Override formatting configuration */
    configuration?: ILogOptionConfiguration;
    /**
     * Override the conversion of a Javascript *Object* via *JSON*
     *   - *When passing in an **object** as **data**
     */
    asIs?: boolean;
    /** When multiple named logs are configured, write to this named log */
    logName?: string;
}

/** Object properties generated by Error.captureStackTrace() */
interface IStackTraceObject {
    /** All CallSite objects for the current system call */
    stack?: Array<NodeJS.CallSite>;
}

export {
    ILogDefinition,
    IStandardLevels,
    IBaseConfiguration,
    ILog,
    ILogOptions,
    ILogOptionConfiguration,
    IStackTraceObject,
};
